generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

enum Platforms {
  META
  TWITTER
  LINKEDIN
}

enum CardStatus {
  PENDING
  INPROGRESS
  COMPLETED
}

enum CardPriority {
  LOW
  MEDIUM
  HIGH
}

enum PostStatus {
  SCHEDULED
  PUBLISHED
  DRAFT
  CANCELED
}

model Client {
  id                  String               @id @default(uuid())
  name                String
  email               String
  phone               String
  company             String
  industry            String
  orgId               String
  website             String?              @db.Text()
  campaigns           Campaign[]
  contracts           Contract[]
  metaAccessToken     MetaAccessToken?
  twitterAccessToken  TwitterAccessToken?
  linkedInAccessToken LinkedInAccessToken?
  facebookProfile     FacebookProfile?
  twitterProfile      TwitterProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id        String         @id @default(uuid())
  name      String
  start     DateTime
  end       DateTime
  status    CampaignStatus @default(ACTIVE)
  budget    Int
  platforms Platforms[]
  objective String         @db.Text()
  orgId     String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  List     List[]
  Post     Post[]
}

model List {
  id    String @id @default(uuid())
  title String
  order Int

  campaignId String
  campaing   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  Card       Card[]
}

model Card {
  id          String        @id @default(uuid())
  title       String
  order       Int
  description String?
  status      CardStatus    @default(PENDING)
  priority    CardPriority?
  dueDate     DateTime

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model Post {
  id String @id @unique

  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contract {
  id   String @id @default(uuid())
  name String

  fullPath    String
  contractUrl String @db.Text()

  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum EntityType {
  CLIENT
  CAMPAIGN
}

enum Action {
  CREATE
  UPDATE
  DELETE
}

model ActivityLog {
  id          String     @id @default(uuid())
  orgId       String
  entityTitle String
  entityId    String
  entityType  EntityType
  action      Action
  userName    String
  userImage   String
  createdAt   DateTime   @default(now())
}

model MetaAccessToken {
  id        String   @id @default(uuid())
  token     String
  type      String?
  expiresIn DateTime

  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model TwitterAccessToken {
  id           String   @id @default(uuid())
  token        String
  type         String
  expiresIn    DateTime
  refreshToken String

  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model LinkedInAccessToken {
  id        String   @id @default(uuid())
  token     String
  expiresIn DateTime

  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model FacebookProfile {
  id    String @id @default(uuid())
  name  String
  image String

  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model TwitterProfile {
  id       String @id @default(uuid())
  name     String
  username String
  image    String

  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
}
